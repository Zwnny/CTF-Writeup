from z3 import *

byte = [ BitVec('b%s' % i,8) for i in range(38) ]

s = Solver()

s.add( ((byte[34] ^ byte[23] * 7 ^ ~byte[36] + 13) & 0xFF) == 0xB6 )
s.add( ((byte[37] ^ byte[10] * 7 ^ ~byte[21] + 13) & 0xFF) == 0xDF)
s.add( ((byte[24] ^ byte[23] * 7 ^ ~byte[19] + 13) & 0xFF) == 0xCD )
s.add( ((byte[25] ^ byte[13] * 7 ^ ~byte[23] + 13) & 0xFF) == 0x90)
s.add( ((byte[6] ^ byte[27] * 7 ^ ~byte[25] + 13) & 0xFF) == 0x8A)
s.add( ((byte[4] ^ byte[32] * 7 ^ ~byte[22] + 13) & 0xFF) == 0xE3)
s.add( ((byte[25] ^ byte[19] * 7 ^ ~byte[1] + 13) & 0xFF) == 0x6B )
s.add( ((byte[22] ^ byte[7] * 7 ^ ~byte[29] + 13) & 0xFF) == 0x55 )
s.add( ((byte[15] ^ byte[10] * 7 ^ ~byte[20] + 13) & 0xFF) == 0xBC)
s.add( ((byte[29] ^ byte[16] * 7 ^ ~byte[12] + 13) & 0xFF) == 0x58)
s.add( ((byte[35] ^ byte[4] * 7 ^ ~byte[33] + 13) & 0xFF) == 0x54 )
s.add( ((byte[36] ^ byte[2] * 7 ^ ~byte[4] + 13) & 0xFF) == 0x67)
s.add( ((byte[26] ^ byte[3] * 7 ^ ~byte[1] + 13) & 0xFF) == 0xD8 )
s.add( ((byte[12] ^ byte[6] * 7 ^ ~byte[18] + 13) & 0xFF) == 0xA5 )
s.add( ((byte[12] ^ byte[28] * 7 ^ ~byte[36] + 13) & 0xFF) == 0x97 )
s.add( ((byte[20] ^ byte[0] * 7 ^ ~byte[21] + 13) & 0xFF) == 0x65 )
s.add( ((byte[27] ^ byte[36] * 7 ^ ~byte[14] + 13) & 0xFF) == 0xF8 )
s.add( ((byte[35] ^ byte[2] * 7 ^ ~byte[19] + 13) & 0xFF) == 0x2C )
s.add( ((byte[13] ^ byte[11] * 7 ^ ~byte[33] + 13) & 0xFF) == 0xF2 )
s.add( ((byte[33] ^ byte[11] * 7 ^ ~byte[3] + 13) & 0xFF) == 0xEB )
s.add( ((byte[31] ^ byte[37] * 7 ^ ~byte[29] + 13) & 0xFF) == 0xF8 )
s.add( ((byte[1] ^ byte[33] * 7 ^ ~byte[31] + 13) & 0xFF) == 0x21 )
s.add( ((byte[34] ^ byte[22] * 7 ^ ~byte[35] + 13) & 0xFF) == 0x54 )
s.add( ((byte[36] ^ byte[16] * 7 ^ ~byte[4] + 13) & 0xFF) == 0x4B )
s.add( ((byte[8] ^ byte[3] * 7 ^ ~byte[10] + 13) & 0xFF) == 0xD6 )
s.add( ((byte[20] ^ byte[5] * 7 ^ ~byte[12] + 13) & 0xFF) == 0xC1 )
s.add( ((byte[28] ^ byte[34] * 7 ^ ~byte[16] + 13) & 0xFF) == 0xD2 )
s.add( ((byte[3] ^ byte[35] * 7 ^ ~byte[9] + 13) & 0xFF) == 0xCD )
s.add( ((byte[27] ^ byte[22] * 7 ^ ~byte[2] + 13) & 0xFF) == 0x2E )
s.add( ((byte[27] ^ byte[18] * 7 ^ ~byte[9] + 13) & 0xFF) == 0x36 )
s.add( ((byte[3] ^ byte[29] * 7 ^ ~byte[22] + 13) & 0xFF) == 0x20 )
s.add( ((byte[24] ^ byte[4] * 7 ^ ~byte[13] + 13) & 0xFF) == 0x63 )
s.add( ((byte[22] ^ byte[16] * 7 ^ ~byte[13] + 13) & 0xFF) == 0x6C )
s.add( ((byte[12] ^ byte[8] * 7 ^ ~byte[30] + 13) & 0xFF) == 0x75 )
s.add( ((byte[25] ^ byte[27] * 7 ^ ~byte[35] + 13) & 0xFF) == 0x92 )
s.add( ((byte[16] ^ byte[10] * 7 ^ ~byte[14] + 13) & 0xFF) == 0xFA )
s.add( ((byte[21] ^ byte[25] * 7 ^ ~byte[12] + 13) & 0xFF) == 0xC3 )
s.add( ((byte[26] ^ byte[10] * 7 ^ ~byte[30] + 13) & 0xFF) == 0xCB )
s.add( ((byte[20] ^ byte[2] * 7 ^ ~byte[1] + 13) & 0xFF) == 0x2F )
s.add( ((byte[34] ^ byte[12] * 7 ^ ~byte[27] + 13) & 0xFF) == 0x79 )
s.add( ((byte[19] ^ byte[34] * 7 ^ ~byte[20] + 13) & 0xFF) == 0xF6 )
s.add( ((byte[25] ^ byte[22] * 7 ^ ~byte[14] + 13) & 0xFF) == 0x3D )
s.add( ((byte[19] ^ byte[28] * 7 ^ ~byte[37] + 13) & 0xFF) == 0xBD )
s.add( ((byte[24] ^ byte[9] * 7 ^ ~byte[17] + 13) & 0xFF) == 0xB9)

if s.check() == unsat:
    print("[+] No solution")
    exit()
else:
    print( "".join(chr(s.model()[value].as_long()) for value in byte).encode("latin-1")   )